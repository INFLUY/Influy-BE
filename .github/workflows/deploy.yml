name: CI/CD Pipeline with Docker and EC2

on:
  push:
    branches: [ "deploy-7" ]

jobs:
  build-with-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Create application.yml
        shell: bash
        run: |
          mkdir -p src/main/resources
          cat <<EOF > src/main/resources/application.yml
          ${{ secrets.APPLICATION_PROD_YML }}
          EOF
        env:
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew bootJar
        env:
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CONTAINER_NAME }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CONTAINER_NAME }}:latest

  deploy-with-ec2:
    needs: build-with-docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        run: |
          echo "${{ env.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} "
            sudo docker pull ${{ env.DOCKER_USERNAME}}/${{ env.DOCKER_CONTAINER_NAME }}:latest
            sudo docker stop ${{ env.DOCKER_CONTAINER_NAME }}|| true
            sudo docker rm ${{ env.DOCKER_CONTAINER_NAME }}|| true
            sudo docker run -d -p 8080:8081 --name ${{ env.DOCKER_CONTAINER_NAME }}\
              ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_CONTAINER_NAME}}:latest
          "
          rm -f private_key.pem
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_CONTAINER_NAME: ${{ vars.DOCKER_CONTAINER_NAME }}